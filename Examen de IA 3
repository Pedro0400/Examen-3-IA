import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

torch.manual_seed(42)
np.random.seed(42)
x = np.random.uniform(-5, 5, 500)
y = x**2 + np.random.normal(0, 2, 500)
x_tensor = torch.tensor(x, dtype=torch.float32).reshape(-1, 1)
y_tensor = torch.tensor(y, dtype=torch.float32).reshape(-1, 1)
x_train, x_test, y_train, y_test = train_test_split(
    x_tensor, y_tensor, test_size=0.2, random_state=42)
class QuadraticRegressor(nn.Module):
    def init(self):
        super().init()
        self.hidden = nn.Linear(1, 10)
        self.output = nn.Linear(10, 1)
        self.relu = nn.ReLU()
        
    def forward(self, x):
        x = self.relu(self.hidden(x))
        return self.output(x)
model = QuadraticRegressor()
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)
epochs = 1000
train_losses = []
test_losses = []

for epoch in range(epochs):
    model.train()
    optimizer.zero_grad()
    y_pred = model(x_train)
    loss = criterion(y_pred, y_train)
    loss.backward()
    optimizer.step()
    model.eval()
    with torch.no_grad():
        test_pred = model(x_test)
        test_loss = criterion(test_pred, y_test)
    train_losses.append(loss.item())
    test_losses.append(test_loss.item())
    
    if epoch % 100 == 0:
        print(f'Epoch {epoch:3d} | Train Loss: {loss.item():.4f} | Test Loss: {test_loss.item():.4f}')
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(train_losses, label='Train Loss')
plt.plot(test_losses, label='Test Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.title('Training and Validation Loss')
plt.legend()

plt.subplot(1, 2, 2)
x_plot = np.linspace(-5, 5, 100)
with torch.no_grad():
    y_plot = model(torch.tensor(x_plot, dtype=torch.float32).reshape(-1, 1)).numpy()

plt.scatter(x, y, alpha=0.3, label='Datos reales')
plt.plot(x_plot, x_plot**2, 'r-', label='Función real (sin ruido)')
plt.plot(x_plot, y_plot, 'k-', linewidth=2, label='Predicción de la red')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Model Predictions vs Actual Data')
plt.legend()

plt.tight_layout()
plt.show()
